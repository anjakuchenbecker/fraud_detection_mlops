/*
Purpose: 
- Builds automated continuous training (CT) pipeline and deploys it to local docker registry
Trigger(s): 
- New push (source code change) on pipeline related components on main branch is detected by jenkins (SCM Polling)
Interacts with: 
- Github
- Local docker registry
*/

pipeline {
    agent any
    environment {
        LOCAL_DOCKER_REPO = "fraud_detection_ct_pipeline"
        LOCAL_DOCKER_REGISTRY = "localhost:5000"
        GIT_REPO = "https://github.com/anjakuchenbecker/fraud_detection_mlops.git"
        GIT_BRANCH = "main"
        SKIPPED = true
    }
    triggers {
        pollSCM("* * * * *")
    }
    stages {
        stage ("Checkout") {
            /*
            Checkout from repo and retrieve latest commit hash (short version) for later tag construction.
            */
            steps {
                // checkout
                git branch: "${GIT_BRANCH}", url: "${GIT_REPO}"
                // retrieve latest commit and populate environment variables
                script {
                    env.GIT_COMMIT_SHORT = sh (
                        script: "git describe --always",
                        returnStdout: true
                    )
                    env.IMAGE_NAME = "${LOCAL_DOCKER_REGISTRY}/${LOCAL_DOCKER_REPO}:${BUILD_TIMESTAMP}-${GIT_COMMIT_SHORT}"
                }
            }
        }
        stage("Create and tag CT Pipeline Image") {
            /*
            Condition: execute only in case of changes on pipeline related components
            Build and tag CT pipeline from dockerfile.
            Image tag consists of build timestamp and commit hash ("20220423070508-78bf84d")
            */
            when {
                anyOf {
                    // set of pipeline related components
                    changeset "6_implement/Jenkinsfile.ct-pipeline-build"
                    changeset "6_implement/docker/ct_pipeline/**"
                    changeset "6_implement/data_ingestion/**"
                    changeset "6_implement/data_validation/**"
                    changeset "6_implement/data_preprocessing/**"
                    changeset "6_implement/model_training/**"
                    changeset "6_implement/model_evaluation/**"
                    changeset "6_implement/model_validation/**"
                }
            }
            steps {
                sh "docker build -f docker/ct_pipeline/Dockerfile -t ${IMAGE_NAME} ."
                script {
                    env.SKIPPED = false
                }
            }
        }
        stage("Push image to docker registry") {
            /*
            Condition: execute only in case of changes on pipeline related components
            Push previously built CT Pipeline image to local docker registry.
            */
            steps {
                script {
                    if (env.SKIPPED == false) {
                        sh "docker push ${IMAGE_NAME}"
                    } else {
                        echo "Stage \"Push image to docker registry\" skipped due to when conditional"
                    }
                }
            }
        }
        stage("Test image pulling") {
            /*
            Condition: execute only in case of changes on pipeline related components
            Perform smoke test: ensure previously pushed CT Pipeline image can be pulled from local docker registry.
            */
            steps {
                script {
                    if (env.SKIPPED == false) { 
                        // remove locally-cached image
                        sh "docker image remove ${IMAGE_NAME}"
                        // perform test pull from local docker registry
                        sh "docker pull ${IMAGE_NAME}"
                        // remove locally-cached image, finally
                        sh "docker image remove ${IMAGE_NAME}"
                    } else {
                        echo "Stage \"Test image pulling\" skipped due to when conditional"
                    }
                }
            }
        }
    }
}